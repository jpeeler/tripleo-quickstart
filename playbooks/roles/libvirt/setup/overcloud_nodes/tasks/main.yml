- name: get a list of MACs to use
  generate_macs:
    nodes: "{{ vms.overcloud.nodes }}"
    bridges: "{{ networks.bridges }}"
  register: node_mac_map

- name: Check if volume_pool exists
  virt_pool:
    command: status
    name: "{{ vms.volume_pool }}"
  register: volume_pool_status
  ignore_errors: true

- name: Create volume_pool if it does not exists
  virt_pool:
    command: define
    name: "{{ vms.volume_pool }}"
    xml: '{{ lookup("template", "volume_pool.xml.j2") }}'
  when: volume_pool_status.failed is defined

- name: Create volume_pool if it does not exists
  virt_pool:
    command: create
    name: "{{ vms.volume_pool }}"
  when: volume_pool_status.failed is defined

- name: create baremetal vm storage
  shell: >
         virsh vol-create-as '{{ vms.volume_pool }}' '{{ item.name }}'.qcow2 '{{ item.disk_size }}'G --format qcow2 >&2;
         touch '{{ vms.volume_path }}''{{ item.name }}'.qcow2;
         chattr +C '{{ vms.volume_path }}''{{ item.name }}'.qcow2 || true;
  with_items: "{{ vms.overcloud.nodes }}"
  become: true

- name: define baremetal vms
  virt:
    name: "{{ item.name }}"
    command: define
    xml: "{{ lookup('template', 'baremetalvm.xml.j2') }}"
  with_items: "{{ vms.overcloud.nodes }}"
  become: true

- name: create working_dir
  file:
    name: "{{ working_dir }}"
    state: directory
  become: true
  become_user: "{{non_root_user}}"

- name: write instackenv script
  template:
    src: instackenv.json.j2
    dest: "{{ working_dir }}/instackenv.json"
  become: true
  become_user: "{{non_root_user}}"
